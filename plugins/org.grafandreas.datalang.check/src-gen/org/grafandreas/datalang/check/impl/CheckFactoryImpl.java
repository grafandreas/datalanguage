/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.check.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.grafandreas.datalang.check.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CheckFactoryImpl extends EFactoryImpl implements CheckFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CheckFactory init()
  {
    try
    {
      CheckFactory theCheckFactory = (CheckFactory)EPackage.Registry.INSTANCE.getEFactory(CheckPackage.eNS_URI);
      if (theCheckFactory != null)
      {
        return theCheckFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CheckFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CheckFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CheckPackage.CHECKS_MODEL: return createChecksModel();
      case CheckPackage.CHECK_BLOCK: return createCheckBlock();
      case CheckPackage.REQ_CHECK: return createReqCheck();
      case CheckPackage.NAMES: return createNames();
      case CheckPackage.ERROR_TEMPLATE: return createErrorTemplate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChecksModel createChecksModel()
  {
    ChecksModelImpl checksModel = new ChecksModelImpl();
    return checksModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckBlock createCheckBlock()
  {
    CheckBlockImpl checkBlock = new CheckBlockImpl();
    return checkBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReqCheck createReqCheck()
  {
    ReqCheckImpl reqCheck = new ReqCheckImpl();
    return reqCheck;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Names createNames()
  {
    NamesImpl names = new NamesImpl();
    return names;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ErrorTemplate createErrorTemplate()
  {
    ErrorTemplateImpl errorTemplate = new ErrorTemplateImpl();
    return errorTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CheckPackage getCheckPackage()
  {
    return (CheckPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CheckPackage getPackage()
  {
    return CheckPackage.eINSTANCE;
  }

} //CheckFactoryImpl
