/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.check.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.xtext.xbase.XExpression;

import org.grafandreas.datalang.check.CheckPackage;
import org.grafandreas.datalang.check.ErrorTemplate;
import org.grafandreas.datalang.check.Names;
import org.grafandreas.datalang.check.ReqCheck;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Req Check</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.grafandreas.datalang.check.impl.ReqCheckImpl#getExpr <em>Expr</em>}</li>
 *   <li>{@link org.grafandreas.datalang.check.impl.ReqCheckImpl#getErrorTemplate <em>Error Template</em>}</li>
 *   <li>{@link org.grafandreas.datalang.check.impl.ReqCheckImpl#getAttachToFields <em>Attach To Fields</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReqCheckImpl extends MinimalEObjectImpl.Container implements ReqCheck
{
  /**
   * The cached value of the '{@link #getExpr() <em>Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpr()
   * @generated
   * @ordered
   */
  protected XExpression expr;

  /**
   * The cached value of the '{@link #getErrorTemplate() <em>Error Template</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorTemplate()
   * @generated
   * @ordered
   */
  protected ErrorTemplate errorTemplate;

  /**
   * The cached value of the '{@link #getAttachToFields() <em>Attach To Fields</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttachToFields()
   * @generated
   * @ordered
   */
  protected Names attachToFields;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReqCheckImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CheckPackage.Literals.REQ_CHECK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpression getExpr()
  {
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpr(XExpression newExpr, NotificationChain msgs)
  {
    XExpression oldExpr = expr;
    expr = newExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__EXPR, oldExpr, newExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpr(XExpression newExpr)
  {
    if (newExpr != expr)
    {
      NotificationChain msgs = null;
      if (expr != null)
        msgs = ((InternalEObject)expr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__EXPR, null, msgs);
      if (newExpr != null)
        msgs = ((InternalEObject)newExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__EXPR, null, msgs);
      msgs = basicSetExpr(newExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__EXPR, newExpr, newExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ErrorTemplate getErrorTemplate()
  {
    return errorTemplate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetErrorTemplate(ErrorTemplate newErrorTemplate, NotificationChain msgs)
  {
    ErrorTemplate oldErrorTemplate = errorTemplate;
    errorTemplate = newErrorTemplate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__ERROR_TEMPLATE, oldErrorTemplate, newErrorTemplate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setErrorTemplate(ErrorTemplate newErrorTemplate)
  {
    if (newErrorTemplate != errorTemplate)
    {
      NotificationChain msgs = null;
      if (errorTemplate != null)
        msgs = ((InternalEObject)errorTemplate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__ERROR_TEMPLATE, null, msgs);
      if (newErrorTemplate != null)
        msgs = ((InternalEObject)newErrorTemplate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__ERROR_TEMPLATE, null, msgs);
      msgs = basicSetErrorTemplate(newErrorTemplate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__ERROR_TEMPLATE, newErrorTemplate, newErrorTemplate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Names getAttachToFields()
  {
    return attachToFields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAttachToFields(Names newAttachToFields, NotificationChain msgs)
  {
    Names oldAttachToFields = attachToFields;
    attachToFields = newAttachToFields;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS, oldAttachToFields, newAttachToFields);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAttachToFields(Names newAttachToFields)
  {
    if (newAttachToFields != attachToFields)
    {
      NotificationChain msgs = null;
      if (attachToFields != null)
        msgs = ((InternalEObject)attachToFields).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS, null, msgs);
      if (newAttachToFields != null)
        msgs = ((InternalEObject)newAttachToFields).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS, null, msgs);
      msgs = basicSetAttachToFields(newAttachToFields, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS, newAttachToFields, newAttachToFields));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CheckPackage.REQ_CHECK__EXPR:
        return basicSetExpr(null, msgs);
      case CheckPackage.REQ_CHECK__ERROR_TEMPLATE:
        return basicSetErrorTemplate(null, msgs);
      case CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS:
        return basicSetAttachToFields(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CheckPackage.REQ_CHECK__EXPR:
        return getExpr();
      case CheckPackage.REQ_CHECK__ERROR_TEMPLATE:
        return getErrorTemplate();
      case CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS:
        return getAttachToFields();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CheckPackage.REQ_CHECK__EXPR:
        setExpr((XExpression)newValue);
        return;
      case CheckPackage.REQ_CHECK__ERROR_TEMPLATE:
        setErrorTemplate((ErrorTemplate)newValue);
        return;
      case CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS:
        setAttachToFields((Names)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CheckPackage.REQ_CHECK__EXPR:
        setExpr((XExpression)null);
        return;
      case CheckPackage.REQ_CHECK__ERROR_TEMPLATE:
        setErrorTemplate((ErrorTemplate)null);
        return;
      case CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS:
        setAttachToFields((Names)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CheckPackage.REQ_CHECK__EXPR:
        return expr != null;
      case CheckPackage.REQ_CHECK__ERROR_TEMPLATE:
        return errorTemplate != null;
      case CheckPackage.REQ_CHECK__ATTACH_TO_FIELDS:
        return attachToFields != null;
    }
    return super.eIsSet(featureID);
  }

} //ReqCheckImpl
