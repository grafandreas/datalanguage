/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.grafandreas.datalang.check.CheckBlock;
import org.grafandreas.datalang.check.ChecksModel;
import org.grafandreas.datalang.check.ReqCheck;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class CheckJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final ChecksModel element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      EList<JvmMember> _members = it.getMembers();
      final Function1<CheckBlock, JvmGenericType> _function_1 = (CheckBlock block) -> {
        final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it_1) -> {
          it_1.setStatic(true);
          EList<JvmMember> _members_1 = it_1.getMembers();
          final Function1<ReqCheck, JvmOperation> _function_3 = (ReqCheck check) -> {
            final Procedure1<JvmOperation> _function_4 = (JvmOperation it_2) -> {
              EList<JvmFormalParameter> _parameters = it_2.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "it", block.getReq());
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              this._jvmTypesBuilder.setBody(it_2, check.getExpr());
            };
            return this._jvmTypesBuilder.toMethod(check, "A", this._typeReferenceBuilder.typeRef(Boolean.class), _function_4);
          };
          List<JvmOperation> _map = ListExtensions.<ReqCheck, JvmOperation>map(block.getChecks(), _function_3);
          this._jvmTypesBuilder.<JvmMember>operator_add(_members_1, _map);
        };
        return this._jvmTypesBuilder.toClass(block, "Block", _function_2);
      };
      List<JvmGenericType> _map = ListExtensions.<CheckBlock, JvmGenericType>map(element.getBlocks(), _function_1);
      this._jvmTypesBuilder.<JvmMember>operator_add(_members, _map);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, "A.CheckBase"), _function);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof ChecksModel) {
      _infer((ChecksModel)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
