/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.cdl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;

import org.grafandreas.datalang.cdl.Attribute;
import org.grafandreas.datalang.cdl.CdlPackage;
import org.grafandreas.datalang.cdl.IDField;
import org.grafandreas.datalang.cdl.RequirementType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Requirement Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.RequirementTypeImpl#getGeneral <em>General</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.RequirementTypeImpl#getIdfields <em>Idfields</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.RequirementTypeImpl#getAttributes <em>Attributes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequirementTypeImpl extends TypeImpl implements RequirementType
{
  /**
	 * The cached value of the '{@link #getGeneral() <em>General</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getGeneral()
	 * @generated
	 * @ordered
	 */
  protected JvmParameterizedTypeReference general;

  /**
	 * The cached value of the '{@link #getIdfields() <em>Idfields</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getIdfields()
	 * @generated
	 * @ordered
	 */
  protected EList<IDField> idfields;

  /**
	 * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAttributes()
	 * @generated
	 * @ordered
	 */
  protected EList<Attribute> attributes;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected RequirementTypeImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return CdlPackage.Literals.REQUIREMENT_TYPE;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public JvmParameterizedTypeReference getGeneral()
  {
		return general;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetGeneral(JvmParameterizedTypeReference newGeneral, NotificationChain msgs)
  {
		JvmParameterizedTypeReference oldGeneral = general;
		general = newGeneral;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CdlPackage.REQUIREMENT_TYPE__GENERAL, oldGeneral, newGeneral);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setGeneral(JvmParameterizedTypeReference newGeneral)
  {
		if (newGeneral != general) {
			NotificationChain msgs = null;
			if (general != null)
				msgs = ((InternalEObject)general).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CdlPackage.REQUIREMENT_TYPE__GENERAL, null, msgs);
			if (newGeneral != null)
				msgs = ((InternalEObject)newGeneral).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CdlPackage.REQUIREMENT_TYPE__GENERAL, null, msgs);
			msgs = basicSetGeneral(newGeneral, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.REQUIREMENT_TYPE__GENERAL, newGeneral, newGeneral));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<IDField> getIdfields()
  {
		if (idfields == null) {
			idfields = new EObjectContainmentEList<IDField>(IDField.class, this, CdlPackage.REQUIREMENT_TYPE__IDFIELDS);
		}
		return idfields;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<Attribute> getAttributes()
  {
		if (attributes == null) {
			attributes = new EObjectContainmentEList<Attribute>(Attribute.class, this, CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES);
		}
		return attributes;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case CdlPackage.REQUIREMENT_TYPE__GENERAL:
				return basicSetGeneral(null, msgs);
			case CdlPackage.REQUIREMENT_TYPE__IDFIELDS:
				return ((InternalEList<?>)getIdfields()).basicRemove(otherEnd, msgs);
			case CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES:
				return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case CdlPackage.REQUIREMENT_TYPE__GENERAL:
				return getGeneral();
			case CdlPackage.REQUIREMENT_TYPE__IDFIELDS:
				return getIdfields();
			case CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES:
				return getAttributes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case CdlPackage.REQUIREMENT_TYPE__GENERAL:
				setGeneral((JvmParameterizedTypeReference)newValue);
				return;
			case CdlPackage.REQUIREMENT_TYPE__IDFIELDS:
				getIdfields().clear();
				getIdfields().addAll((Collection<? extends IDField>)newValue);
				return;
			case CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES:
				getAttributes().clear();
				getAttributes().addAll((Collection<? extends Attribute>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case CdlPackage.REQUIREMENT_TYPE__GENERAL:
				setGeneral((JvmParameterizedTypeReference)null);
				return;
			case CdlPackage.REQUIREMENT_TYPE__IDFIELDS:
				getIdfields().clear();
				return;
			case CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES:
				getAttributes().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case CdlPackage.REQUIREMENT_TYPE__GENERAL:
				return general != null;
			case CdlPackage.REQUIREMENT_TYPE__IDFIELDS:
				return idfields != null && !idfields.isEmpty();
			case CdlPackage.REQUIREMENT_TYPE__ATTRIBUTES:
				return attributes != null && !attributes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //RequirementTypeImpl
