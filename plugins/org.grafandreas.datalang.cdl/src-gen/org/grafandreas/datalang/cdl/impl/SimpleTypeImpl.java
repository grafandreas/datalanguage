/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.cdl.impl;

import java.math.BigDecimal;
import java.math.BigInteger;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.grafandreas.datalang.cdl.CdlPackage;
import org.grafandreas.datalang.cdl.SimpleType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getLowerRangeDecimal <em>Lower Range Decimal</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getLowerRangeInteger <em>Lower Range Integer</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getUpperRangeDecimal <em>Upper Range Decimal</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getUpperRangeInteger <em>Upper Range Integer</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getBaseType <em>Base Type</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getLowerBound <em>Lower Bound</em>}</li>
 *   <li>{@link org.grafandreas.datalang.cdl.impl.SimpleTypeImpl#getDeclaredUpperBound <em>Declared Upper Bound</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleTypeImpl extends TypeImpl implements SimpleType
{
  /**
	 * The default value of the '{@link #getLowerRangeDecimal() <em>Lower Range Decimal</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerRangeDecimal()
	 * @generated
	 * @ordered
	 */
  protected static final BigDecimal LOWER_RANGE_DECIMAL_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getLowerRangeDecimal() <em>Lower Range Decimal</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerRangeDecimal()
	 * @generated
	 * @ordered
	 */
  protected BigDecimal lowerRangeDecimal = LOWER_RANGE_DECIMAL_EDEFAULT;

  /**
	 * The default value of the '{@link #getLowerRangeInteger() <em>Lower Range Integer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerRangeInteger()
	 * @generated
	 * @ordered
	 */
  protected static final BigInteger LOWER_RANGE_INTEGER_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getLowerRangeInteger() <em>Lower Range Integer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerRangeInteger()
	 * @generated
	 * @ordered
	 */
  protected BigInteger lowerRangeInteger = LOWER_RANGE_INTEGER_EDEFAULT;

  /**
	 * The default value of the '{@link #getUpperRangeDecimal() <em>Upper Range Decimal</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getUpperRangeDecimal()
	 * @generated
	 * @ordered
	 */
  protected static final BigDecimal UPPER_RANGE_DECIMAL_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getUpperRangeDecimal() <em>Upper Range Decimal</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getUpperRangeDecimal()
	 * @generated
	 * @ordered
	 */
  protected BigDecimal upperRangeDecimal = UPPER_RANGE_DECIMAL_EDEFAULT;

  /**
	 * The default value of the '{@link #getUpperRangeInteger() <em>Upper Range Integer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getUpperRangeInteger()
	 * @generated
	 * @ordered
	 */
  protected static final BigInteger UPPER_RANGE_INTEGER_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getUpperRangeInteger() <em>Upper Range Integer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getUpperRangeInteger()
	 * @generated
	 * @ordered
	 */
  protected BigInteger upperRangeInteger = UPPER_RANGE_INTEGER_EDEFAULT;

  /**
	 * The cached value of the '{@link #getBaseType() <em>Base Type</em>}' reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getBaseType()
	 * @generated
	 * @ordered
	 */
  protected SimpleType baseType;

  /**
	 * The default value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerBound()
	 * @generated
	 * @ordered
	 */
  protected static final int LOWER_BOUND_EDEFAULT = 0;

  /**
	 * The cached value of the '{@link #getLowerBound() <em>Lower Bound</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLowerBound()
	 * @generated
	 * @ordered
	 */
  protected int lowerBound = LOWER_BOUND_EDEFAULT;

  /**
	 * The default value of the '{@link #getDeclaredUpperBound() <em>Declared Upper Bound</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDeclaredUpperBound()
	 * @generated
	 * @ordered
	 */
  protected static final int DECLARED_UPPER_BOUND_EDEFAULT = 0;

  /**
	 * The cached value of the '{@link #getDeclaredUpperBound() <em>Declared Upper Bound</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDeclaredUpperBound()
	 * @generated
	 * @ordered
	 */
  protected int declaredUpperBound = DECLARED_UPPER_BOUND_EDEFAULT;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SimpleTypeImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return CdlPackage.Literals.SIMPLE_TYPE;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public BigDecimal getLowerRangeDecimal()
  {
		return lowerRangeDecimal;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setLowerRangeDecimal(BigDecimal newLowerRangeDecimal)
  {
		BigDecimal oldLowerRangeDecimal = lowerRangeDecimal;
		lowerRangeDecimal = newLowerRangeDecimal;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__LOWER_RANGE_DECIMAL, oldLowerRangeDecimal, lowerRangeDecimal));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public BigInteger getLowerRangeInteger()
  {
		return lowerRangeInteger;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setLowerRangeInteger(BigInteger newLowerRangeInteger)
  {
		BigInteger oldLowerRangeInteger = lowerRangeInteger;
		lowerRangeInteger = newLowerRangeInteger;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__LOWER_RANGE_INTEGER, oldLowerRangeInteger, lowerRangeInteger));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public BigDecimal getUpperRangeDecimal()
  {
		return upperRangeDecimal;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setUpperRangeDecimal(BigDecimal newUpperRangeDecimal)
  {
		BigDecimal oldUpperRangeDecimal = upperRangeDecimal;
		upperRangeDecimal = newUpperRangeDecimal;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__UPPER_RANGE_DECIMAL, oldUpperRangeDecimal, upperRangeDecimal));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public BigInteger getUpperRangeInteger()
  {
		return upperRangeInteger;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setUpperRangeInteger(BigInteger newUpperRangeInteger)
  {
		BigInteger oldUpperRangeInteger = upperRangeInteger;
		upperRangeInteger = newUpperRangeInteger;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__UPPER_RANGE_INTEGER, oldUpperRangeInteger, upperRangeInteger));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public SimpleType getBaseType()
  {
		if (baseType != null && baseType.eIsProxy()) {
			InternalEObject oldBaseType = (InternalEObject)baseType;
			baseType = (SimpleType)eResolveProxy(oldBaseType);
			if (baseType != oldBaseType) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, CdlPackage.SIMPLE_TYPE__BASE_TYPE, oldBaseType, baseType));
			}
		}
		return baseType;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public SimpleType basicGetBaseType()
  {
		return baseType;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setBaseType(SimpleType newBaseType)
  {
		SimpleType oldBaseType = baseType;
		baseType = newBaseType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__BASE_TYPE, oldBaseType, baseType));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public int getLowerBound()
  {
		return lowerBound;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setLowerBound(int newLowerBound)
  {
		int oldLowerBound = lowerBound;
		lowerBound = newLowerBound;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__LOWER_BOUND, oldLowerBound, lowerBound));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public int getDeclaredUpperBound()
  {
		return declaredUpperBound;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setDeclaredUpperBound(int newDeclaredUpperBound)
  {
		int oldDeclaredUpperBound = declaredUpperBound;
		declaredUpperBound = newDeclaredUpperBound;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, CdlPackage.SIMPLE_TYPE__DECLARED_UPPER_BOUND, oldDeclaredUpperBound, declaredUpperBound));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_DECIMAL:
				return getLowerRangeDecimal();
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_INTEGER:
				return getLowerRangeInteger();
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_DECIMAL:
				return getUpperRangeDecimal();
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_INTEGER:
				return getUpperRangeInteger();
			case CdlPackage.SIMPLE_TYPE__BASE_TYPE:
				if (resolve) return getBaseType();
				return basicGetBaseType();
			case CdlPackage.SIMPLE_TYPE__LOWER_BOUND:
				return getLowerBound();
			case CdlPackage.SIMPLE_TYPE__DECLARED_UPPER_BOUND:
				return getDeclaredUpperBound();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_DECIMAL:
				setLowerRangeDecimal((BigDecimal)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_INTEGER:
				setLowerRangeInteger((BigInteger)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_DECIMAL:
				setUpperRangeDecimal((BigDecimal)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_INTEGER:
				setUpperRangeInteger((BigInteger)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__BASE_TYPE:
				setBaseType((SimpleType)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__LOWER_BOUND:
				setLowerBound((Integer)newValue);
				return;
			case CdlPackage.SIMPLE_TYPE__DECLARED_UPPER_BOUND:
				setDeclaredUpperBound((Integer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_DECIMAL:
				setLowerRangeDecimal(LOWER_RANGE_DECIMAL_EDEFAULT);
				return;
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_INTEGER:
				setLowerRangeInteger(LOWER_RANGE_INTEGER_EDEFAULT);
				return;
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_DECIMAL:
				setUpperRangeDecimal(UPPER_RANGE_DECIMAL_EDEFAULT);
				return;
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_INTEGER:
				setUpperRangeInteger(UPPER_RANGE_INTEGER_EDEFAULT);
				return;
			case CdlPackage.SIMPLE_TYPE__BASE_TYPE:
				setBaseType((SimpleType)null);
				return;
			case CdlPackage.SIMPLE_TYPE__LOWER_BOUND:
				setLowerBound(LOWER_BOUND_EDEFAULT);
				return;
			case CdlPackage.SIMPLE_TYPE__DECLARED_UPPER_BOUND:
				setDeclaredUpperBound(DECLARED_UPPER_BOUND_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_DECIMAL:
				return LOWER_RANGE_DECIMAL_EDEFAULT == null ? lowerRangeDecimal != null : !LOWER_RANGE_DECIMAL_EDEFAULT.equals(lowerRangeDecimal);
			case CdlPackage.SIMPLE_TYPE__LOWER_RANGE_INTEGER:
				return LOWER_RANGE_INTEGER_EDEFAULT == null ? lowerRangeInteger != null : !LOWER_RANGE_INTEGER_EDEFAULT.equals(lowerRangeInteger);
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_DECIMAL:
				return UPPER_RANGE_DECIMAL_EDEFAULT == null ? upperRangeDecimal != null : !UPPER_RANGE_DECIMAL_EDEFAULT.equals(upperRangeDecimal);
			case CdlPackage.SIMPLE_TYPE__UPPER_RANGE_INTEGER:
				return UPPER_RANGE_INTEGER_EDEFAULT == null ? upperRangeInteger != null : !UPPER_RANGE_INTEGER_EDEFAULT.equals(upperRangeInteger);
			case CdlPackage.SIMPLE_TYPE__BASE_TYPE:
				return baseType != null;
			case CdlPackage.SIMPLE_TYPE__LOWER_BOUND:
				return lowerBound != LOWER_BOUND_EDEFAULT;
			case CdlPackage.SIMPLE_TYPE__DECLARED_UPPER_BOUND:
				return declaredUpperBound != DECLARED_UPPER_BOUND_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (lowerRangeDecimal: ");
		result.append(lowerRangeDecimal);
		result.append(", lowerRangeInteger: ");
		result.append(lowerRangeInteger);
		result.append(", upperRangeDecimal: ");
		result.append(upperRangeDecimal);
		result.append(", upperRangeInteger: ");
		result.append(upperRangeInteger);
		result.append(", lowerBound: ");
		result.append(lowerBound);
		result.append(", declaredUpperBound: ");
		result.append(declaredUpperBound);
		result.append(')');
		return result.toString();
	}

} //SimpleTypeImpl
