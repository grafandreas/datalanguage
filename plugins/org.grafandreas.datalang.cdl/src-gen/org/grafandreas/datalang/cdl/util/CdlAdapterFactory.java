/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.cdl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.grafandreas.datalang.cdl.Attribute;
import org.grafandreas.datalang.cdl.CdlPackage;
import org.grafandreas.datalang.cdl.EnumLiteral;
import org.grafandreas.datalang.cdl.IDField;
import org.grafandreas.datalang.cdl.RequirementType;
import org.grafandreas.datalang.cdl.SimpleType;
import org.grafandreas.datalang.cdl.SpecificationModel;
import org.grafandreas.datalang.cdl.Type;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.grafandreas.datalang.cdl.CdlPackage
 * @generated
 */
public class CdlAdapterFactory extends AdapterFactoryImpl
{
  /**
	 * The cached model package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static CdlPackage modelPackage;

  /**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public CdlAdapterFactory()
  {
		if (modelPackage == null) {
			modelPackage = CdlPackage.eINSTANCE;
		}
	}

  /**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object object)
  {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

  /**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected CdlSwitch<Adapter> modelSwitch =
    new CdlSwitch<Adapter>() {
			@Override
			public Adapter caseSpecificationModel(SpecificationModel object) {
				return createSpecificationModelAdapter();
			}
			@Override
			public Adapter casePackage(org.grafandreas.datalang.cdl.Package object) {
				return createPackageAdapter();
			}
			@Override
			public Adapter caseType(Type object) {
				return createTypeAdapter();
			}
			@Override
			public Adapter caseRequirementType(RequirementType object) {
				return createRequirementTypeAdapter();
			}
			@Override
			public Adapter caseIDField(IDField object) {
				return createIDFieldAdapter();
			}
			@Override
			public Adapter caseAttribute(Attribute object) {
				return createAttributeAdapter();
			}
			@Override
			public Adapter caseEnum(org.grafandreas.datalang.cdl.Enum object) {
				return createEnumAdapter();
			}
			@Override
			public Adapter caseEnumLiteral(EnumLiteral object) {
				return createEnumLiteralAdapter();
			}
			@Override
			public Adapter caseSimpleType(SimpleType object) {
				return createSimpleTypeAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

  /**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  @Override
  public Adapter createAdapter(Notifier target)
  {
		return modelSwitch.doSwitch((EObject)target);
	}


  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.SpecificationModel <em>Specification Model</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.SpecificationModel
	 * @generated
	 */
  public Adapter createSpecificationModelAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.Package <em>Package</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.Package
	 * @generated
	 */
  public Adapter createPackageAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.Type <em>Type</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.Type
	 * @generated
	 */
  public Adapter createTypeAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.RequirementType <em>Requirement Type</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.RequirementType
	 * @generated
	 */
  public Adapter createRequirementTypeAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.IDField <em>ID Field</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.IDField
	 * @generated
	 */
  public Adapter createIDFieldAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.Attribute <em>Attribute</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.Attribute
	 * @generated
	 */
  public Adapter createAttributeAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.Enum <em>Enum</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.Enum
	 * @generated
	 */
  public Adapter createEnumAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.EnumLiteral <em>Enum Literal</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.EnumLiteral
	 * @generated
	 */
  public Adapter createEnumLiteralAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.grafandreas.datalang.cdl.SimpleType <em>Simple Type</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.grafandreas.datalang.cdl.SimpleType
	 * @generated
	 */
  public Adapter createSimpleTypeAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
  public Adapter createEObjectAdapter()
  {
		return null;
	}

} //CdlAdapterFactory
