/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.grafandreas.datalang.cdl.Attribute;
import org.grafandreas.datalang.cdl.RequirementType;
import org.grafandreas.datalang.cdl.SpecificationModel;
import org.grafandreas.datalang.cdl.Type;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class CdlJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final SpecificationModel element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Function1<org.grafandreas.datalang.cdl.Package, EList<Type>> _function = (org.grafandreas.datalang.cdl.Package it) -> {
      return it.getMembers();
    };
    final Consumer<Type> _function_1 = (Type it) -> {
      this.infer(it, acceptor, isPreIndexingPhase);
    };
    IterableExtensions.<org.grafandreas.datalang.cdl.Package, Type>flatMap(element.getPackage(), _function).forEach(_function_1);
  }
  
  protected void _infer(final RequirementType element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    InputOutput.<String>println("Infex");
    final Procedure1<JvmGenericType> _function = (JvmGenericType rti) -> {
      EList<JvmMember> _members = rti.getMembers();
      final Function1<Attribute, JvmOperation> _function_1 = (Attribute attr) -> {
        final Procedure1<JvmOperation> _function_2 = (JvmOperation it) -> {
          XExpression _defaultExpr = attr.getDefaultExpr();
          boolean _tripleNotEquals = (_defaultExpr != null);
          if (_tripleNotEquals) {
            this._jvmTypesBuilder.setBody(it, attr.getDefaultExpr());
          } else {
            StringConcatenationClient _client = new StringConcatenationClient() {
              @Override
              protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                _builder.append("return null;");
              }
            };
            this._jvmTypesBuilder.setBody(it, _client);
          }
        };
        return this._jvmTypesBuilder.toMethod(attr, attr.getName(), attr.getType(), _function_2);
      };
      List<JvmOperation> _map = ListExtensions.<Attribute, JvmOperation>map(element.getAttributes(), _function_1);
      this._jvmTypesBuilder.<JvmMember>operator_add(_members, _map);
    };
    acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(element, this._iQualifiedNameProvider.getFullyQualifiedName(element)), _function);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof RequirementType) {
      _infer((RequirementType)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element instanceof SpecificationModel) {
      _infer((SpecificationModel)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
