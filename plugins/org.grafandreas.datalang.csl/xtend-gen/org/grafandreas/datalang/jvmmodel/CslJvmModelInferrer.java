/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.jvmmodel;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenationClient;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.grafandreas.datalang.cdl.Type;
import org.grafandreas.datalang.csl.Instance;
import org.grafandreas.datalang.csl.Instances;
import org.grafandreas.datalang.csl.ValueAssignment;

/**
 * <p>Infers a JVM model from the source model.</p>
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
@SuppressWarnings("all")
public class CslJvmModelInferrer extends AbstractModelInferrer {
  /**
   * convenience API to build and initialize JVM types and their members.
   */
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  /**
   * The dispatch method {@code infer} is called for each instance of the
   * given element's type that is contained in a resource.
   * 
   * @param element
   *            the model to create one or more
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
   *            types} from.
   * @param acceptor
   *            each created
   *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
   *            without a container should be passed to the acceptor in order
   *            get attached to the current resource. The acceptor's
   *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
   *            accept(..)} method takes the constructed empty type for the
   *            pre-indexing phase. This one is further initialized in the
   *            indexing phase using the lambda you pass as the last argument.
   * @param isPreIndexingPhase
   *            whether the method is called in a pre-indexing phase, i.e.
   *            when the global index is not yet fully updated. You must not
   *            rely on linking using the index if isPreIndexingPhase is
   *            <code>true</code>.
   */
  protected void _infer(final Instances element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    final Function1<Instance, Boolean> _function = (Instance el) -> {
      return Boolean.valueOf(((el.getDeclaration() != null) && (!el.getDeclaration().eIsProxy())));
    };
    final Consumer<Instance> _function_1 = (Instance el) -> {
      final Procedure1<JvmGenericType> _function_2 = (JvmGenericType it) -> {
        String _name = el.getName();
        String _plus = ("N:" + _name);
        InputOutput.<String>println(_plus);
        InputOutput.<String>println(("E:" + el));
        Type _declaration = el.getDeclaration();
        String _plus_1 = ("D:" + _declaration);
        InputOutput.<String>println(_plus_1);
        InputOutput.<EList<Resource>>println(el.eResource().getResourceSet().getResources());
        InputOutput.<EObject>println(EcoreUtil2.resolve(el.getDeclaration(), element.eResource().getResourceSet()));
        InputOutput.<Boolean>println(Boolean.valueOf(isPreIndexingPhase));
        EList<JvmTypeReference> _superTypes = it.getSuperTypes();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(this._iQualifiedNameProvider.getFullyQualifiedName(el.getDeclaration()).toString());
        this._jvmTypesBuilder.<JvmTypeReference>operator_add(_superTypes, _typeRef);
        EList<JvmMember> _members = it.getMembers();
        final Function1<ValueAssignment, JvmOperation> _function_3 = (ValueAssignment va) -> {
          JvmOperation _xblockexpression = null;
          {
            XExpression _valSpec = va.getValSpec();
            if ((_valSpec instanceof XFeatureCall)) {
              XExpression _valSpec_1 = va.getValSpec();
              final XFeatureCall fc = ((XFeatureCall) _valSpec_1);
              InputOutput.<String>println(fc.getConcreteSyntaxFeatureName());
              EList<JvmMember> _members_1 = it.getMembers();
              final Procedure1<JvmOperation> _function_4 = (JvmOperation it_1) -> {
                StringConcatenationClient _client = new StringConcatenationClient() {
                  @Override
                  protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {
                    _builder.append("return null;");
                  }
                };
                this._jvmTypesBuilder.setBody(it_1, _client);
              };
              JvmOperation _method = this._jvmTypesBuilder.toMethod(va, fc.getConcreteSyntaxFeatureName(), this._typeReferenceBuilder.typeRef("D.T1"), _function_4);
              this._jvmTypesBuilder.<JvmOperation>operator_add(_members_1, _method);
            }
            final Procedure1<JvmOperation> _function_5 = (JvmOperation it_1) -> {
              EList<JvmFormalParameter> _parameters = it_1.getParameters();
              JvmFormalParameter _parameter = this._jvmTypesBuilder.toParameter(element, "it", va.getDeclaration().getType());
              this._jvmTypesBuilder.<JvmFormalParameter>operator_add(_parameters, _parameter);
              InputOutput.<String>println("VALSPEC");
              InputOutput.<XExpression>println(va.getValSpec());
              InputOutput.<EClass>println(va.getValSpec().eClass());
              final Procedure1<EObject> _function_6 = (EObject it_2) -> {
                InputOutput.<EObject>println(it_2);
              };
              IteratorExtensions.<EObject>forEach(va.getValSpec().eAllContents(), _function_6);
              this._jvmTypesBuilder.setBody(it_1, va.getValSpec());
            };
            _xblockexpression = this._jvmTypesBuilder.toMethod(va, va.getDeclaration().getName(), va.getDeclaration().getType(), _function_5);
          }
          return _xblockexpression;
        };
        List<JvmOperation> _map = ListExtensions.<ValueAssignment, JvmOperation>map(el.getValues(), _function_3);
        this._jvmTypesBuilder.<JvmMember>operator_add(_members, _map);
      };
      acceptor.<JvmGenericType>accept(this._jvmTypesBuilder.toClass(el, this._iQualifiedNameProvider.getFullyQualifiedName(el).toString()), _function_2);
    };
    IterableExtensions.<Instance>filter(element.getInstances(), _function).forEach(_function_1);
  }
  
  public void infer(final EObject element, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (element instanceof Instances) {
      _infer((Instances)element, acceptor, isPreIndexingPhase);
      return;
    } else if (element != null) {
      _infer(element, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(element, acceptor, isPreIndexingPhase).toString());
    }
  }
}
