/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.csl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.grafandreas.datalang.cdl.IDField;

import org.grafandreas.datalang.csl.CslPackage;
import org.grafandreas.datalang.csl.IDAssignment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ID Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.grafandreas.datalang.csl.impl.IDAssignmentImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.grafandreas.datalang.csl.impl.IDAssignmentImpl#getIdSpec <em>Id Spec</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IDAssignmentImpl extends MinimalEObjectImpl.Container implements IDAssignment
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected IDField declaration;

  /**
   * The default value of the '{@link #getIdSpec() <em>Id Spec</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdSpec()
   * @generated
   * @ordered
   */
  protected static final String ID_SPEC_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIdSpec() <em>Id Spec</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdSpec()
   * @generated
   * @ordered
   */
  protected String idSpec = ID_SPEC_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IDAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CslPackage.Literals.ID_ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IDField getDeclaration()
  {
    if (declaration != null && declaration.eIsProxy())
    {
      InternalEObject oldDeclaration = (InternalEObject)declaration;
      declaration = (IDField)eResolveProxy(oldDeclaration);
      if (declaration != oldDeclaration)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CslPackage.ID_ASSIGNMENT__DECLARATION, oldDeclaration, declaration));
      }
    }
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IDField basicGetDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclaration(IDField newDeclaration)
  {
    IDField oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CslPackage.ID_ASSIGNMENT__DECLARATION, oldDeclaration, declaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIdSpec()
  {
    return idSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdSpec(String newIdSpec)
  {
    String oldIdSpec = idSpec;
    idSpec = newIdSpec;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CslPackage.ID_ASSIGNMENT__ID_SPEC, oldIdSpec, idSpec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CslPackage.ID_ASSIGNMENT__DECLARATION:
        if (resolve) return getDeclaration();
        return basicGetDeclaration();
      case CslPackage.ID_ASSIGNMENT__ID_SPEC:
        return getIdSpec();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CslPackage.ID_ASSIGNMENT__DECLARATION:
        setDeclaration((IDField)newValue);
        return;
      case CslPackage.ID_ASSIGNMENT__ID_SPEC:
        setIdSpec((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CslPackage.ID_ASSIGNMENT__DECLARATION:
        setDeclaration((IDField)null);
        return;
      case CslPackage.ID_ASSIGNMENT__ID_SPEC:
        setIdSpec(ID_SPEC_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CslPackage.ID_ASSIGNMENT__DECLARATION:
        return declaration != null;
      case CslPackage.ID_ASSIGNMENT__ID_SPEC:
        return ID_SPEC_EDEFAULT == null ? idSpec != null : !ID_SPEC_EDEFAULT.equals(idSpec);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (idSpec: ");
    result.append(idSpec);
    result.append(')');
    return result.toString();
  }

} //IDAssignmentImpl
