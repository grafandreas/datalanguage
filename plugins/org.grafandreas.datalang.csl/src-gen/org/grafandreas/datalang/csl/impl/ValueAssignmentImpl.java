/**
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.csl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.xtext.xbase.XExpression;

import org.grafandreas.datalang.cdl.Attribute;

import org.grafandreas.datalang.csl.CslPackage;
import org.grafandreas.datalang.csl.ValueAssignment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.grafandreas.datalang.csl.impl.ValueAssignmentImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.grafandreas.datalang.csl.impl.ValueAssignmentImpl#getValSpec <em>Val Spec</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueAssignmentImpl extends MinimalEObjectImpl.Container implements ValueAssignment
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected Attribute declaration;

  /**
   * The cached value of the '{@link #getValSpec() <em>Val Spec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValSpec()
   * @generated
   * @ordered
   */
  protected XExpression valSpec;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValueAssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CslPackage.Literals.VALUE_ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Attribute getDeclaration()
  {
    if (declaration != null && declaration.eIsProxy())
    {
      InternalEObject oldDeclaration = (InternalEObject)declaration;
      declaration = (Attribute)eResolveProxy(oldDeclaration);
      if (declaration != oldDeclaration)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CslPackage.VALUE_ASSIGNMENT__DECLARATION, oldDeclaration, declaration));
      }
    }
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclaration(Attribute newDeclaration)
  {
    Attribute oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CslPackage.VALUE_ASSIGNMENT__DECLARATION, oldDeclaration, declaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpression getValSpec()
  {
    return valSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValSpec(XExpression newValSpec, NotificationChain msgs)
  {
    XExpression oldValSpec = valSpec;
    valSpec = newValSpec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CslPackage.VALUE_ASSIGNMENT__VAL_SPEC, oldValSpec, newValSpec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValSpec(XExpression newValSpec)
  {
    if (newValSpec != valSpec)
    {
      NotificationChain msgs = null;
      if (valSpec != null)
        msgs = ((InternalEObject)valSpec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CslPackage.VALUE_ASSIGNMENT__VAL_SPEC, null, msgs);
      if (newValSpec != null)
        msgs = ((InternalEObject)newValSpec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CslPackage.VALUE_ASSIGNMENT__VAL_SPEC, null, msgs);
      msgs = basicSetValSpec(newValSpec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CslPackage.VALUE_ASSIGNMENT__VAL_SPEC, newValSpec, newValSpec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CslPackage.VALUE_ASSIGNMENT__VAL_SPEC:
        return basicSetValSpec(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CslPackage.VALUE_ASSIGNMENT__DECLARATION:
        if (resolve) return getDeclaration();
        return basicGetDeclaration();
      case CslPackage.VALUE_ASSIGNMENT__VAL_SPEC:
        return getValSpec();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CslPackage.VALUE_ASSIGNMENT__DECLARATION:
        setDeclaration((Attribute)newValue);
        return;
      case CslPackage.VALUE_ASSIGNMENT__VAL_SPEC:
        setValSpec((XExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CslPackage.VALUE_ASSIGNMENT__DECLARATION:
        setDeclaration((Attribute)null);
        return;
      case CslPackage.VALUE_ASSIGNMENT__VAL_SPEC:
        setValSpec((XExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CslPackage.VALUE_ASSIGNMENT__DECLARATION:
        return declaration != null;
      case CslPackage.VALUE_ASSIGNMENT__VAL_SPEC:
        return valSpec != null;
    }
    return super.eIsSet(featureID);
  }

} //ValueAssignmentImpl
