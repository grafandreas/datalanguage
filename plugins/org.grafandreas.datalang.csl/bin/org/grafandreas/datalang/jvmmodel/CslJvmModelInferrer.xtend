/*
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.jvmmodel

import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import org.grafandreas.datalang.csl.Instances
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.xbase.XFeatureCall

/**
 * <p>Infers a JVM model from the source model.</p>
 *
 * <p>The JVM model should contain all elements that would appear in the Java code
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>
 */
class CslJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	@Inject extension IQualifiedNameProvider
	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 *
	 * @param element
	 *            the model to create one or more
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link org.eclipse.xtext.common.types.JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(Instances element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {

		
		element.instances.filter[el|el.declaration !== null && !el.declaration.eIsProxy].forEach[el|
			acceptor.accept(el.toClass(el.fullyQualifiedName.toString)) [
				println("N:"+el.name)
				println("E:"+el)
				println("D:"+el.declaration)
				println(el.eResource.resourceSet.resources)
				println(EcoreUtil2.resolve(el.declaration, element.eResource.resourceSet))
				println(isPreIndexingPhase)
				superTypes += typeRef(el.declaration.fullyQualifiedName.toString)
				
	
				
				members += el.values.map[va|
					
					if(va.valSpec instanceof XFeatureCall ) {
						val fc = va.valSpec as XFeatureCall
						println(fc.concreteSyntaxFeatureName)
						members+=va.toMethod(fc.concreteSyntaxFeatureName,typeRef("D.T1")) [
							it.body = '''return null;'''
						]
					}
				
					va.toMethod(va.declaration.name, va.declaration.type) [
						it.parameters+=element.toParameter("it", va.declaration.type )
						println("VALSPEC")
						println(va.valSpec)
						println(va.valSpec.eClass)
						va.valSpec.eAllContents.forEach[println(it)]
						it.body = va.valSpec
					]
				]
			]
		]
		
	}
}
