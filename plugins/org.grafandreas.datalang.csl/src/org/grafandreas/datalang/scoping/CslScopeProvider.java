/*
 * generated by Xtext 2.25.0
 */
package org.grafandreas.datalang.scoping;

import javax.inject.Inject;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.common.types.JvmDeclaredType;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.util.TypeReferences;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.scoping.batch.IFeatureScopeSession;
import org.eclipse.xtext.xbase.scoping.batch.ITypeImporter;
import org.grafandreas.datalang.csl.CslPackage;
import org.grafandreas.datalang.csl.Instance;
import org.grafandreas.datalang.csl.Instances;
import org.grafandreas.datalang.csl.ValueAssignment;

import com.google.common.base.Predicates;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class CslScopeProvider extends AbstractCslScopeProvider {

	@Inject
	IQualifiedNameConverter qualifiedNameConverter;

	@Inject
	IQualifiedNameProvider nameProvider;

	@Override
	public IScope getScope(EObject context, EReference reference) {
		System.out.println("Get Scope " + context + " : " + reference);
		System.out.println(isFeatureCallScope(reference));
		
		if(context instanceof ValueAssignment) {
			Instances containerOfType = EcoreUtil2.getContainerOfType(context, Instances.class);
			Scopes.scopeFor(containerOfType.getInstances(),
					in -> qualifiedNameConverter.toQualifiedName(in.getName()), super.getScope(context, reference));
		}
		
		return super.getScope(context, reference);
		

	}

	@Inject
	IGlobalScopeProvider gsp;

	@Inject
	IQualifiedNameProvider np;

	@SuppressWarnings("restriction")
	@Inject
	private TypeReferences typeReferences;

	@SuppressWarnings("restriction")
	@Override
	public IFeatureScopeSession newSession(Resource context) {
		IFeatureScopeSession result = super.newSession(context);
		result = result.addImports(new ITypeImporter.Client() {
			@Override
			public void doAddImports(ITypeImporter importer) {
				EReference ref = EcoreFactory.eINSTANCE.createEReference();

				ref.setEType(CslPackage.Literals.INSTANCE);
				IScope scope = gsp.getScope(context, ref, Predicates.alwaysTrue());
				for (IEObjectDescription d : scope.getAllElements()) {
					QualifiedName qualifiedName = d.getQualifiedName();
					if (qualifiedName.getSegmentCount() > 1) {
						// why do they exist with simple name at all
						JvmType findDeclaredType = typeReferences.findDeclaredType(qualifiedName.toString(), context);
						if (findDeclaredType instanceof JvmDeclaredType) {
							importer.importStaticExtension((JvmDeclaredType) findDeclaredType,
									findDeclaredType.getSimpleName(), false);
						}
						System.err.println("Importing:"+qualifiedName);
					}
				}
				
				System.out.println("Context "+context);
				for (Instance v : EcoreUtil2.getAllContentsOfType(context.getContents().get(0), Instance.class)) {
					 String name=np.getFullyQualifiedName(v).toString() ;
					 System.out.println("name" + name);
					 JvmType findDeclaredType=typeReferences.findDeclaredType(name, context) ;
					if (findDeclaredType instanceof JvmDeclaredType ) {
						System.out.println(findDeclaredType.getSimpleName());
						importer.importStaticExtension((JvmDeclaredType) findDeclaredType, findDeclaredType.getSimpleName(), false);
					}
				}
			}
		});
		return result;
	}
}
